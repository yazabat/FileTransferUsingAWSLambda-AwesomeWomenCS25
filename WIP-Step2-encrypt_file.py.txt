from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import os
import secrets

# Load public key
with open("public_key.pem", "rb") as f:
    public_key = serialization.load_pem_public_key(f.read())

# Generate AES key and IV
aes_key = secrets.token_bytes(32)  # AES-256
iv = secrets.token_bytes(16)       # IV for AES

# Encrypt file using AES
with open("original.txt", "rb") as f:
    plaintext = f.read()

cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv))
encryptor = cipher.encryptor()
ciphertext = encryptor.update(plaintext) + encryptor.finalize()

# Encrypt AES key using RSA
encrypted_key = public_key.encrypt(
    aes_key,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Save encrypted outputs
with open("encrypted_file.pgp", "wb") as f:
    f.write(ciphertext)

with open("encrypted_key.bin", "wb") as f:
    f.write(encrypted_key)

with open("iv.bin", "wb") as f:
    f.write(iv)

print("âœ… File encrypted: encrypted_file.pgp + encrypted_key.bin + iv.bin")
